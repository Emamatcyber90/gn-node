import("//v8/gni/v8.gni")
import("node.gni")

# Component build currently not supported.
assert(!is_component_build)

node_files = read_file("//node_files.json", "json")
library_files = node_files.library_files

copy("node_js2c_inputs") {
  sources = library_files
  outputs = [
    "$target_gen_dir/js2c_inputs/{{source_target_relative}}",
  ]
}

action("generate_config_gypi") {
  script = "//tools/generate_config_gypi.py"
  inputs = [ "//tools/config.gypi.template" ]
  outputs = [ "$target_gen_dir/config.gypi", ]
  depfile = "$target_gen_dir/$target_name.d"

  script_args = [ "//third_party", "$root_out_dir" ]
  script_args += inputs
  script_args += outputs
  script_args += [ depfile ]
  args = rebase_path(script_args, root_build_dir)
}

chdir_action("node_js2c") {
  deps = [
    ":generate_config_gypi",
    ":node_js2c_inputs",
  ]

  macro_inputs = []
  if (!node_use_dtrace && !node_use_etw) {
    macro_inputs += [ "src/notrace_macros.py" ]
  }
  if (node_debug_lib) {
    macro_inputs += [ "tools/nodcheck_macros.py" ]
  } else {
    macro_inputs += [ "tools/dcheck_macros.py" ]
  }
  macro_inputs += [ "tools/check_macros.py" ]

  config_gypi = [ "$target_gen_dir/config.gypi" ]

  inputs = library_files + macro_inputs + config_gypi
  outputs = [ "$target_gen_dir/node_javascript.cc" ]

  cwd = "$target_gen_dir/js2c_inputs"
  script = "//tools/js2c.py"
  args = rebase_path(outputs)
  args += library_files
  args += rebase_path(macro_inputs + config_gypi)
}

config("node_lib_config") {
  include_dirs = [ "src" ]
  cflags = [ "-Wno-microsoft-include" ]
  libs = []
  cflags_cc = [
    "-Wno-deprecated-declarations",
    "-Wno-implicit-fallthrough",
    "-Wno-return-type",
    "-Wno-sometimes-uninitialized",
    "-Wno-unused-label",
    "-Wno-unused-private-field",
    "-Wno-unused-variable",
    "-Wno-string-plus-int",
    "-Wno-string-conversion",
  ]
  defines = [
    "NODE_WANT_INTERNALS=1",
    "NODE_IMPLEMENTATION",
  ]

  if (target_cpu == "x86") {
    node_arch = "ia32"
  } else {
    node_arch = target_cpu
  }
  defines += [ "NODE_ARCH=\"$node_arch\"" ]

  if (target_os == "win") {
    node_platform = "win32"
  } else if (target_os == "mac") {
    node_platform = "darwin"
  } else {
    node_platform = target_os
  }
  defines += [ "NODE_PLATFORM=\"$node_platform\"" ]

  if (is_win) {
    defines += [
      "NOMINMAX",
      "_UNICODE=1",
    ]
    libs += [ "psapi.lib" ]
  } else {
    defines += [ "__POSIX__" ]
  }
  if (is_mac) {
    libs += [ "CoreFoundation.framework" ]
  }
  if (node_tag != "") {
    defines += [ "NODE_TAG=\"$node_tag\"" ]
  }
  if (node_v8_options != "") {
    defines += [ "NODE_V8_OPTIONS=\"$node_v8_options\"" ]
  }
  if (node_release_urlbase != "") {
    defines += [ "NODE_RELEASE_URLBASE=\"$node_release_urlbase\"" ]
  }
  if (node_use_openssl) {
    defines += [
      "NODE_OPENSSL_SYSTEM_CERT_PATH=\"$node_openssl_system_ca_path\"",
      "HAVE_OPENSSL=1",
    ]
  } else {
    defines += [ "HAVE_OPENSSL=0" ]
  }
  if (node_use_v8_platform) {
    defines += [ "NODE_USE_V8_PLATFORM=1" ]
  } else {
    defines += [ "NODE_USE_V8_PLATFORM=0" ]
  }
  if (node_report) {
    defines += [ "NODE_REPORT" ]
  }
  if (node_enable_inspector) {
    defines += [ "HAVE_INSPECTOR=1" ]
  } else {
    defines += [ "HAVE_INSPECTOR=0" ]
  }
  if (v8_enable_i18n_support) {
    defines += [ "NODE_HAVE_I18N_SUPPORT=1" ]
  } else {
    defines += [ "NODE_HAVE_I18N_SUPPORT=0" ]
  }
}

component("node_lib") {
  deps = [
    ":node_js2c",
    "deps/brotli/c:brotli",
    "deps/cares",
    "deps/http_parser",
    "deps/llhttp",
    "deps/nghttp2",
    "deps/zlib",
    "//v8:v8_libplatform",
  ]
  public_deps = [
    "deps/uv",
    "//v8",
  ]
  configs += [ ":node_lib_config" ]
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  configs -= [ "//build/config/clang:find_bad_constructs" ]

  sources = node_files.node_sources
  sources += [
    "$target_gen_dir/node_javascript.cc",
    "src/node_code_cache_stub.cc",
  ]

  if (v8_enable_i18n_support) {
    deps += [ "//third_party/icu" ]
  }

  if (node_enable_inspector) {
    sources += [
      "src/inspector_agent.cc",
      "src/inspector_agent.h",
      "src/inspector_io.cc",
      "src/inspector_io.h",
      "src/inspector_js_api.cc",
      "src/inspector_socket.cc",
      "src/inspector_socket.h",
      "src/inspector_socket_server.cc",
      "src/inspector_socket_server.h",
    ]
    deps += [ "src/inspector" ]
  }

  if (node_use_openssl) {
    deps += [ "deps/openssl" ]
    sources += [
      "src/node_crypto.cc",
      "src/node_crypto.h",
      "src/node_crypto_bio.cc",
      "src/node_crypto_bio.h",
      "src/node_crypto_clienthello-inl.h",
      "src/node_crypto_clienthello.cc",
      "src/node_crypto_clienthello.h",
      "src/node_crypto_groups.h",
      "src/tls_wrap.cc",
      "src/tls_wrap.h",
    ]
  }

  if (node_report) {
    sources += [
      "src/node_report.cc",
      "src/node_report_module.cc",
      "src/node_report_utils.cc",
    ]
  }
}

executable("node") {
  sources = [ "src/node_main.cc" ]
  deps = [ ":node_lib" ]
}

executable("node_cctest") {
  testonly = true
  deps = [
    ":node_lib",
    "//testing/gtest:gtest_main",
  ]
  configs += [ ":node_lib_config" ]
  sources = node_files.cctest_sources
  if (node_enable_inspector) {
    sources += [
      "test/cctest/test_inspector_socket.cc",
      "test/cctest/test_inspector_socket_server.cc",
    ]
  }
}
